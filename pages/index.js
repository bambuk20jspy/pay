import React from 'react';
import Button from '@mui/material/Button'
import Head from 'next/head'
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { Input } from '../components/Input';
import { useForm,useFormState } from "react-hook-form";
import { format } from 'date-fns';
import { createPayApi } from '../services/pay';

import styles from '../styles/Home.module.scss'

// Функция для пробелов и для лимита занчении
const normalizeCardNumber = (value) => {
	return value.replace(/[^0-9\-()]/g, "").match(/.{1,4}/g)?.join(" ").substr(0, 19) || ""
}    


// Функция для лимита занчении
const normalizeCvvNumber = (value) => {
	return value.replace(/[^0-9\-()]/g, "").substr(0, 3)
}    

export default function Home() {

	const [payResponse, setPayResponse] = React.useState(null);
	const [loading, setLoading] = React.useState(false);
	//! Стейт для даты
	const [selectedDate, handleDateChange] = React.useState(new Date());

	//! React-hook-form и схема валидации
	const { control, handleSubmit} = useForm({
		mode: 'onChange',
	});
	//! Для валидации
	const { errors, isValid } = useFormState({
		control
	})

	//! Отправка на сервер
	const createPayHandle = async (payData) => {
		const payDataObj = {
			CardNumber: payData.CardNumber.replace( /\s/g, ""),
			ExpDate: format(new Date(payData.ExpDate), 'MM/yyyy'),
			Cvv: payData.Cvv,
			Amount: Number(payData.Amount)
		}

		try {
			setLoading(true); // Перед загрузкой на сервер срабатывает loading

			//! services/pay.api
			const { data } = await createPayApi(payDataObj)

			setPayResponse(data) // полученный ответ закидываем в useState
			setLoading(false)// после успешной загрузки отключаем загрузчик
		} catch (error) {
			console.log(error);
		}
	}

	//! normalizeCardNumber - здесь указана длина символов, пробелы и тип число
	const handleChangeCard = (event) => {
		const {value} = event.target
		event.target.value = normalizeCardNumber(value)
	}

	//! normalizeCvvNumber - здесь указана длина символов
	const handleChangeCvv = (event) => {
		const {value} = event.target
		event.target.value = normalizeCvvNumber(value)
	} 

return (
	<div className={styles.container}>
		<Head>
			<title>Pay</title>
			<meta name="description" content="Generated by create next app" />
			<link rel="icon" href="/favicon.ico" />
		</Head>
		<div className={styles.card_wrapper}>
			<form onSubmit={handleSubmit(createPayHandle)}>
				<Input
					label='Card Number'
					placeholder='0000 0000 0000 0000'
					type='tel'
					name='CardNumber'
					min={19}
					errors={errors}
					control={control}
					onChangeHandle={handleChangeCard}
					value={selectedDate}
					fullWidth={true}
				/>
				<div className={styles.date_cvv_wrapper}>
					<LocalizationProvider sx={{borderRadius: '12px'}} dateAdapter={AdapterDateFns}>
						<div>
							<Input
								label='Date'
								name='ExpDate'
								errors={errors}
								control={control}
								onChangeHandle={handleDateChange}
								dateInp={true}
							/>
						</div>
					</LocalizationProvider>
					<div>
						<Input
							label='CVV'
							type='number'
							name='Cvv'
							min={3}
							errors={errors}
							control={control}
							onChangeHandle={handleChangeCvv}
							fullWidth={true}
						/>
					</div>
				</div>
				<div  className={styles.input_amount}>
					<Input
						label='Amount'
						type='number'
						name='Amount'
						errors={errors}
						control={control}
						fullWidth={true}
					/>
				</div>	
				<Button
					className={styles.btn}
					variant='contained'
					color='primary'
					size='large'
					type='submit'
					disabled={!isValid}
					fullWidth
				>
					{loading ? 'Loading ...' : 'Make payment'}
				</Button>
			</form>
			{payResponse ? (
				<div className={styles.res_wrapper}>
					<div className='d-flex'>
						<h4>{Object.keys(payResponse)[0]}:</h4> 
						<h4>{payResponse.RequestId}</h4> 	
					</div>
					<div className='d-flex'>
						<h4>{Object.keys(payResponse)[1]}:</h4> 
						<h4>{payResponse.Amount}</h4> 	
					</div>
				</div>
			) : null}
		</div> 
	</div>
	)
}
